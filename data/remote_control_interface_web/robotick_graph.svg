<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg id="graph" xmlns="http://www.w3.org/2000/svg" width="1000" height="400" viewBox="0 0 1000 400">
  <style type="text/css"><![CDATA[
    .swimlane {
      fill: #1a1a1a;
      stroke: #333;
    }
    .workload {
      fill: #2266aa;
      stroke: #88ccff;
      stroke-width: 2;
      rx: 6;
      cursor: move;
    }
    .workload text {
      fill: white;
      font-size: 12px;
      pointer-events: none;
    }
    .connection {
      fill: none;
      stroke: #ffaa00;
      stroke-width: 2;
      stroke-dasharray: 4 4;
      animation: pulse 2s infinite linear;
    }
    @keyframes pulse {
      to {
        stroke-dashoffset: -8;
      }
    }
    .label {
      fill: white;
      font-size: 10px;
    }
    .group {
      fill: none;
      stroke: #33cc66;
      stroke-width: 2;
      stroke-dasharray: 6 4;
    }
  ]]></style>

  <!-- Swimlanes -->
  <rect x="0" y="0" width="1000" height="150" class="swimlane" />
  <text x="10" y="20" class="label">Thread 1 (Control)</text>
  <rect x="0" y="150" width="1000" height="150" class="swimlane" />
  <text x="10" y="170" class="label">Thread 2 (UI)</text>

  <!-- Group Workload containers -->
  <rect id="control_sequence" class="group" x="90" y="50" width="560" height="60" />
  <rect id="esp32_root" class="group" x="90" y="200" width="400" height="60" />

  <!-- Workloads -->
  <g class="workload-node" id="steering_mixer" transform="translate(100, 60)">
    <rect class="workload" width="140" height="40" />
    <text x="10" y="25" fill="white">steering_mixer</text>
  </g>
  <g class="workload-node" id="basex" transform="translate(300, 60)">
    <rect class="workload" width="100" height="40" />
    <text x="10" y="25" fill="white">basex</text>
  </g>
  <g class="workload-node" id="heart_ui" transform="translate(100, 210)">
    <rect class="workload" width="160" height="40" />
    <text x="10" y="25" fill="white">heart_ui</text>
  </g>
  <g class="workload-node" id="esp32_root_node" transform="translate(300, 210)">
    <rect class="workload" width="160" height="40" />
    <text x="10" y="25" fill="white">esp32_root</text>
  </g>

  <!-- Connections -->
  <path id="conn1" class="connection" />
  <path id="conn2" class="connection" />

  <script type="application/ecmascript"><![CDATA[
    const connections = [
      { from: "steering_mixer", to: "basex" },
      { from: "steering_mixer", to: "esp32_root_node" }
    ];

    function updateConnections() {
      connections.forEach((conn, i) => {
        const fromNode = document.getElementById(conn.from);
        const toNode = document.getElementById(conn.to);

        const fromMatrix = fromNode.transform.baseVal.getItem(0).matrix;
        const toMatrix = toNode.transform.baseVal.getItem(0).matrix;

        const fromX = fromMatrix.e + fromNode.querySelector("rect").width.baseVal.value;
        const fromY = fromMatrix.f + fromNode.querySelector("rect").height.baseVal.value / 2;

        const toX = toMatrix.e;
        const toY = toMatrix.f + toNode.querySelector("rect").height.baseVal.value / 2;

        const path = document.getElementById(`conn${i + 1}`);
        const d = `M${fromX},${fromY} C${fromX + 40},${fromY} ${toX - 40},${toY} ${toX},${toY}`;
        path.setAttribute("d", d);
      });
    }

    updateConnections();

    const svg = document.getElementById("graph");

    document.querySelectorAll('.workload-node').forEach(node => {
      let offsetX = 0, offsetY = 0;

      const getSvgCoords = (event) => {
        const pt = svg.createSVGPoint();
        pt.x = event.clientX;
        pt.y = event.clientY;
        return pt.matrixTransform(svg.getScreenCTM().inverse());
      };

      const onMouseMove = (e) => {
        const { x, y } = getSvgCoords(e);
        node.setAttribute("transform", `translate(${x - offsetX},${y - offsetY})`);
        updateConnections();
      };

      node.addEventListener('mousedown', (e) => {
        const matrix = node.transform.baseVal.getItem(0).matrix;
        const { x, y } = getSvgCoords(e);
        offsetX = x - matrix.e;
        offsetY = y - matrix.f;
        window.addEventListener('mousemove', onMouseMove);
        window.addEventListener('mouseup', () => {
          window.removeEventListener('mousemove', onMouseMove);
        }, { once: true });
      });
    });
  ]]></script>
</svg>
