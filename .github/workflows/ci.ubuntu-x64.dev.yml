name: CI - Build & Test (ubuntu-x64.dev)

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  docker-ci:
    runs-on: ubuntu-latest
    name: Build & Test (${{ matrix.preset }})

    strategy:
      matrix:
        preset: [ubuntu-x64-debug, ubuntu-x64-development, ubuntu-x64-release]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.docker-cache
          key: docker-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('.devcontainer/Docker.ubuntu-x64.dev') }}
          restore-keys: |
            docker-${{ runner.os }}-

      - name: Load Docker cache
        run: |
          mkdir -p /tmp/.docker-cache
          if [ -f /tmp/.docker-cache/image.tar ]; then
            docker load -i /tmp/.docker-cache/image.tar || true
          fi

      - name: Build Docker image (robotick-ci)
        run: |
          docker build -t robotick-ci \
            -f .devcontainer/Docker.ubuntu-x64.dev \
            .

      - name: Save Docker image to cache
        run: |
          mkdir -p /tmp/.docker-cache
          docker save robotick-ci > /tmp/.docker-cache/image.tar

      - name: Run CMake Build in Docker
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            robotick-ci \
            bash -c "
              set -e
              cmake --preset ${{ matrix.preset }} &&
              cmake --build --preset ${{ matrix.preset }} -j$(nproc)
            "

      - name: Run CTest in Docker (Debug Only)
        if: matrix.preset == 'ubuntu-x64-debug'
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            robotick-ci \
            bash -c "
              set -e
              ctest --test-dir build/ubuntu-x64-debug --output-on-failure --timeout 10
            "
