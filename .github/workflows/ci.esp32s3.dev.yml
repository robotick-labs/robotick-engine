name: CI - Build & Test (esp32s3)

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  esp32s3-build:
    runs-on: ubuntu-latest
    name: Build & Test (esp32s3)

    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # 🔁 Cache the build/ folder to skip rebuilding unchanged files
      - name: 💾 Restore build/ cache
        uses: actions/cache@v4
        with:
          path: build/
          key: esp32-build-${{ hashFiles('sdkconfig', '**/CMakeLists.txt', '**/*.cpp', '**/*.c') }}
          restore-keys: |
            esp32-build-

      # 🐳 Cache the IDF docker image (to avoid full pull every time)
      - name: 💾 Cache IDF image
        uses: actions/cache@v4
        with:
          path: /tmp/idf-cache
          key: idf-docker-esp32s3-${{ runner.os }}

      - name: ⬇️ Load or Pull ESP-IDF image
        run: |
          mkdir -p /tmp/idf-cache
          if [ -f /tmp/idf-cache/image.tar ]; then
            docker load -i /tmp/idf-cache/image.tar || true
          else
            docker pull espressif/idf:release-v5.4
            docker save espressif/idf:release-v5.4 -o /tmp/idf-cache/image.tar
          fi

      - name: 🛠️ Run IDF Clean + Build inside Docker
        run: |
          docker run --rm -t \
            --user root \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/tools/esp32-compile-check \
            espressif/idf:release-v5.4 \
            bash -c "
              set -e
              echo '📦 Installing ninja...'
              apt-get update && apt-get install -y ninja-build
              echo '🔗 Creating symlinks...'
              bash /workspace/tools/make_esp32_symlinks.sh
              echo '🧹 Running IDF clean...'
              ./1_idf_clean.sh
              echo '🛠️  Running IDF build...'
              ./2_idf_build.sh
            "

      # 💾 Save the build cache only if build succeeded
      - name: 💾 Save build/ cache
        if: success()
        uses: actions/cache/save@v4
        with:
          path: build/
          key: esp32-build-${{ hashFiles('sdkconfig', '**/CMakeLists.txt', '**/*.cpp', '**/*.c') }}
