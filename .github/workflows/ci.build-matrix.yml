name: CI - Build Matrix (Linux + ESP32)

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build & Test (${{ matrix.platform }} - ${{ matrix.preset }})

    strategy:
      matrix:
        include:
          - platform: linux
            preset: robotick-engine-tests-linux-debug
            docker_image: mcr.microsoft.com/devcontainers/cpp:ubuntu-24.04
          - platform: linux
            preset: robotick-engine-tests-linux-release
            docker_image: mcr.microsoft.com/devcontainers/cpp:ubuntu-24.04
          - platform: esp32
            preset: esp32s3
            docker_image: espressif/idf:release-v5.4

    steps:
      - name: 📜 Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 📂 Cache Docker image
        id: docker-cache
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/docker-${{ matrix.platform }}-cache
          key: docker-${{ matrix.platform }}-${{ matrix.docker_image }}-v1

      - name: ⬇️ Load Docker image from cache
        if: steps.docker-cache.outputs.cache-hit == 'true'
        run: |
          docker load -i "${{ runner.temp }}/docker-${{ matrix.platform }}-cache/image.tar"

      - name: ⬇️ Pull and cache Docker image
        if: steps.docker-cache.outputs.cache-hit != 'true'
        run: |
          docker pull ${{ matrix.docker_image }}
          mkdir -p "${{ runner.temp }}/docker-${{ matrix.platform }}-cache"
          docker save ${{ matrix.docker_image }} -o "${{ runner.temp }}/docker-${{ matrix.platform }}-cache/image.tar"

      - name: 🛠️ Run Build inside Docker
        run: |
          docker run --rm \
            --user root \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace${{ matrix.platform == 'esp32' && '/tools/esp32-compile-check' || '' }} \
            ${{ matrix.docker_image }} \
            bash -c "
              set -Eeuo pipefail

              if [ '${{ matrix.platform }}' == 'esp32' ]; then
                echo '🚧 ESP32 Setup'
                if ! command -v ninja >/dev/null 2>&1; then
                  export DEBIAN_FRONTEND=noninteractive
                  apt-get update -yq
                  apt-get install -y --no-install-recommends ninja-build
                  rm -rf /var/lib/apt/lists/*
                fi
                bash tools/make_esp32_symlinks.sh
                ./1_idf_clean.sh
                ./2_idf_build.sh

              else
                echo '🚧 Linux Setup'
                bash tools/setup_my_env_as_root.linux.sh
                cmake --preset ${{ matrix.preset }}
                cmake --build --preset ${{ matrix.preset }} -j\$(nproc)
              fi
            "

      - name: ✅ Run CTest (Linux Debug Only)
        if: matrix.platform == 'linux' && matrix.preset == 'robotick-engine-tests-linux-debug'
        run: |
          docker run --rm \
            --user root \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            mcr.microsoft.com/devcontainers/cpp:ubuntu-24.04 \
            bash -c "
              set -Eeuo pipefail
              ctest --test-dir build/linux-debug/cpp/tests --output-on-failure --timeout 10
            "

      - name: 📂 Restore build/ cache (ESP32 only)
        if: matrix.platform == 'esp32'
        uses: actions/cache/restore@v4
        id: build-cache
        with:
          path: build/
          key: esp32-build-${{ runner.os }}-idf-release-v5.4-${{ hashFiles('sdkconfig', '**/CMakeLists.txt', '**/*.c', '**/*.cpp', '**/*.h', '**/*.hpp') }}
          restore-keys: |
            esp32-build-${{ runner.os }}-idf-release-v5.4-

      - name: 📂 Save build/ cache (ESP32 only)
        if: matrix.platform == 'esp32' && success()
        uses: actions/cache/save@v4
        with:
          path: build/
          key: esp32-build-${{ runner.os }}-idf-release-v5.4-${{ hashFiles('sdkconfig', '**/CMakeLists.txt', '**/*.c', '**/*.cpp', '**/*.h', '**/*.hpp') }}

      - name: 📂 Fix build/ permissions (ESP32 only)
        if: matrix.platform == 'esp32' && success()
        run: sudo chown -R $USER:$USER build
